/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.signalcollect.sna.visualization;

import com.signalcollect.sna.GraphProperties;
import com.signalcollect.sna.gephiconnectors.BetweennessSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.ClosenessSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.DegreeSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.LabelPropagationSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.LocalClusterCoefficientSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.PageRankSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.SignalCollectGephiConnector;
import java.awt.Cursor;
import java.awt.Dimension;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.signalcollect.sna.visualization//SignalCollectSNA//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SignalCollectSNATopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "contextmode", openAtStartup = true)
@ActionID(category = "Window", id = "com.signalcollect.sna.visualization.SignalCollectSNATopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SignalCollectSNAAction",
        preferredID = "SignalCollectSNATopComponent"
)
@Messages({
    "CTL_SignalCollectSNAAction=SignalCollectSNA",
    "CTL_SignalCollectSNATopComponent=SignalCollectSNA Window",
    "HINT_SignalCollectSNATopComponent=This is a SignalCollectSNA window"
})
public final class SignalCollectSNATopComponent extends TopComponent {

    private SignalCollectGephiConnector scgc;
    private String fileName;
    JFrame messageFrame;

    public SignalCollectSNATopComponent() {
        initComponents();
        setName(Bundle.CTL_SignalCollectSNATopComponent());
        setToolTipText(Bundle.HINT_SignalCollectSNATopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        metricResultFrame = new javax.swing.JFrame();
        metricValuesScrollPane = new javax.swing.JScrollPane(metricValuesTextPane);
        metricValuesTextPane = new javax.swing.JTextPane();
        distributionFrame = new javax.swing.JFrame();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        propertyPanel = new javax.swing.JPanel();
        propertyButton = new javax.swing.JButton();
        propertyInfo = new javax.swing.JLabel();
        propertyDisplay = new javax.swing.JScrollPane();
        propertyContentDisplay = new javax.swing.JEditorPane();
        infoPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        fileChooserButton = new javax.swing.JButton();
        filePathScrollPane = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        metricPanel = new javax.swing.JPanel();
        metricDropDown = new javax.swing.JComboBox();
        runMetricButton = new javax.swing.JButton();
        infoTextLabel = new javax.swing.JLabel();
        distributionPanel = new javax.swing.JPanel();
        degreeDistributionButton = new javax.swing.JButton();
        distributionInfo = new javax.swing.JLabel();
        clusterDistributionButton = new javax.swing.JButton();
        labelPropagationPanel = new javax.swing.JPanel();
        labelPropagationButton = new javax.swing.JButton();
        labelPropagationInfo = new javax.swing.JLabel();
        stepNumberPane = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        metricValuesTextPane.setContentType("text/html");
        metricValuesTextPane.setFocusable(false);
        metricValuesTextPane.setMargin(new java.awt.Insets(20, 20, 20, 20));
        metricResultFrame.getContentPane().add(metricValuesTextPane, java.awt.BorderLayout.CENTER);
        metricValuesScrollPane.setViewportView(metricValuesTextPane);

        metricResultFrame.getContentPane().add(metricValuesScrollPane, java.awt.BorderLayout.PAGE_START);

        metricResultFrame.setContentPane(metricValuesScrollPane);
        metricResultFrame.setLocation(50, 50);

        distributionFrame.setLocation(50, 50);

        jFrame1.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        setAutoscrolls(true);
        setLayout(new java.awt.GridBagLayout());

        mainPanel.setBackground(new java.awt.Color(100, 150, 255));
        mainPanel.setMaximumSize(new java.awt.Dimension(1000, 800));
        mainPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        propertyPanel.setBackground(new java.awt.Color(100, 150, 255));
        propertyPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 102, 102)));
        propertyPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(propertyButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.propertyButton.text")); // NOI18N
        propertyButton.setAutoscrolls(true);
        propertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        propertyPanel.add(propertyButton, gridBagConstraints);

        propertyInfo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(propertyInfo, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.propertyInfo.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        propertyPanel.add(propertyInfo, gridBagConstraints);

        propertyContentDisplay.setEditable(false);

        propertyContentDisplay.setContentType("text/html"); // NOI18N

        propertyContentDisplay.setFocusable(false);
        propertyDisplay.setViewportView(propertyContentDisplay);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        propertyPanel.add(propertyDisplay, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.5;
        mainPanel.add(propertyPanel, gridBagConstraints);

        infoPanel.setBackground(new java.awt.Color(100, 150, 255));
        infoPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 102, 102)));
        infoPanel.setLayout(new java.awt.GridBagLayout());

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sc-logo-white-bg_200px.png")));
        org.openide.awt.Mnemonics.setLocalizedText(imageLabel, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.imageLabel.text")); // NOI18N
        imageLabel.setToolTipText(org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.imageLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        infoPanel.add(imageLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fileChooserButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.fileChooserButton.text")); // NOI18N
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        infoPanel.add(fileChooserButton, gridBagConstraints);

        filePathScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        filePathScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(1);
        filePathScrollPane.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        infoPanel.add(filePathScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(infoPanel, gridBagConstraints);

        metricPanel.setBackground(new java.awt.Color(100, 150, 255));
        metricPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 102, 102)));
        metricPanel.setLayout(new java.awt.GridBagLayout());

        metricDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Degree", "PageRank", "Closeness","Betweenness" }));
        metricDropDown.setAutoscrolls(true);
        metricDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricDropDownActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        metricPanel.add(metricDropDown, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(runMetricButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.runMetricButton.text")); // NOI18N
        runMetricButton.setAutoscrolls(true);
        runMetricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMetricButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        metricPanel.add(runMetricButton, gridBagConstraints);

        infoTextLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(infoTextLabel, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.infoTextLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        metricPanel.add(infoTextLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.75;
        mainPanel.add(metricPanel, gridBagConstraints);

        distributionPanel.setBackground(new java.awt.Color(100, 150, 255));
        distributionPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 102, 102)));
        distributionPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(degreeDistributionButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.degreeDistributionButton.text")); // NOI18N
        degreeDistributionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        degreeDistributionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeDistributionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        distributionPanel.add(degreeDistributionButton, gridBagConstraints);

        distributionInfo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(distributionInfo, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.distributionInfo.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        distributionPanel.add(distributionInfo, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(clusterDistributionButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.clusterDistributionButton.text")); // NOI18N
        clusterDistributionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterDistributionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        distributionPanel.add(clusterDistributionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.75;
        mainPanel.add(distributionPanel, gridBagConstraints);

        labelPropagationPanel.setBackground(new java.awt.Color(100, 150, 255));
        labelPropagationPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 102, 102)));
        labelPropagationPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(labelPropagationButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.labelPropagationButton.text")); // NOI18N
        labelPropagationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelPropagationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        labelPropagationPanel.add(labelPropagationButton, gridBagConstraints);

        labelPropagationInfo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labelPropagationInfo, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.labelPropagationInfo.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        labelPropagationPanel.add(labelPropagationInfo, gridBagConstraints);

        stepNumberPane.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        labelPropagationPanel.add(stepNumberPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(labelPropagationPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mainPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void runMetricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMetricButtonActionPerformed

        try {
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (jTextArea1.getText() == null) {
                throw new IllegalArgumentException("No file was chosen!\nPlease choose a valid .gml file");
            }
            if (!jTextArea1.getText().contains(".gml")) {
                throw new IllegalArgumentException("The chosen file doesn't have the right format!\nPlease choose a valid .gml file");
            }
            String actualMetric = metricDropDown.getSelectedItem().toString();
            if (actualMetric.equals("Degree")) {
                scgc = new DegreeSignalCollectGephiConnectorImpl(fileName);
                scgc.executeGraph();
                metricValuesTextPane.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
            } else if (actualMetric.equals("PageRank")) {
                scgc = new PageRankSignalCollectGephiConnectorImpl(fileName);
                scgc.executeGraph();
                metricValuesTextPane.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
            } else if (actualMetric.equals("Betweenness")) {
                scgc = new BetweennessSignalCollectGephiConnectorImpl(fileName);
                scgc.executeGraph();
                metricValuesTextPane.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
            } else if (actualMetric.equals("Closeness")) {
                scgc = new ClosenessSignalCollectGephiConnectorImpl(fileName);
                scgc.executeGraph();

                metricValuesTextPane.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
            } else {
                throw new IllegalArgumentException("invalid Signal/Collect metric chosen!\nPlease try again");
            }
            Dimension dim = new Dimension(750, 450);
            metricResultFrame.setMinimumSize(dim);
            metricResultFrame.pack();
            metricValuesTextPane.setVisible(true);
            metricValuesScrollPane.setVisible(true);
            metricResultFrame.setVisible(true);
        } catch (IllegalArgumentException exception) {
            messageFrame = new JFrame();
            JOptionPane.showMessageDialog(messageFrame,
                    exception.getMessage(),
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            messageFrame = new JFrame();
            exception.printStackTrace();
            JOptionPane.showMessageDialog(messageFrame,
                    "Technical exception happened (" + exception.getCause() + ")",
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_runMetricButtonActionPerformed

    private void metricDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metricDropDownActionPerformed

    private void propertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyButtonActionPerformed
        try {
      
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (jTextArea1.getText() == null) {
                throw new IllegalArgumentException("No file was chosen!\nPlease choose a valid .gml file");
            }
            if (!jTextArea1.getText().contains(".gml")) {
                throw new IllegalArgumentException("The chosen file doesn't have the right format!\nPlease choose a valid .gml file");
            }
            
            if (scgc == null || !scgc.getFileName().equals(fileName)) {
                scgc = new DegreeSignalCollectGephiConnectorImpl(fileName);
            }
            propertyContentDisplay.setText(setPropertyText(scgc.getGraphProperties()));
        } catch (IllegalArgumentException exception) {

            messageFrame = new JFrame();
            JOptionPane.showMessageDialog(messageFrame,
                    exception.getMessage(),
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            messageFrame = new JFrame();
            exception.printStackTrace();
            JOptionPane.showMessageDialog(messageFrame,
                    "Technical exception happened (" + exception.getCause() + ")",
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_propertyButtonActionPerformed

    private void degreeDistributionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeDistributionButtonActionPerformed
        try {
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (jTextArea1.getText() == null) {
                throw new IllegalArgumentException("No file was chosen!\nPlease choose a valid .gml file");
            }
            if (!jTextArea1.getText().contains(".gml")) {
                throw new IllegalArgumentException("The chosen file doesn't have the right format!\nPlease choose a valid .gml file");
            }
            scgc = new DegreeSignalCollectGephiConnectorImpl(fileName);
            JFreeChart chart = scgc.createDegreeDistributionImageFile(scgc.getDegreeDistribution(), "DegreeDistribution.png");
            ChartPanel chartPanel = new ChartPanel(chart);
            Dimension dim = new Dimension(750, 450);
            distributionFrame.setMinimumSize(dim);
            distributionFrame.add(chartPanel);
            chartPanel.setVisible(true);

            distributionFrame.pack();
            distributionFrame.setVisible(true);
        } catch (IllegalArgumentException exception) {

            messageFrame = new JFrame();
            JOptionPane.showMessageDialog(messageFrame,
                    exception.getMessage(),
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            messageFrame = new JFrame();
            exception.printStackTrace();
            JOptionPane.showMessageDialog(messageFrame,
                    "Technical exception happened (" + exception.getCause() + ")",
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_degreeDistributionButtonActionPerformed

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Graph Files", "gml");
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        if (chooser.getSelectedFile() != null) {
            fileName = chooser.getSelectedFile().getAbsolutePath();
            jTextArea1.setText(fileName);
//            filePathTextPane.setText(fileName);
        }
    }//GEN-LAST:event_fileChooserButtonActionPerformed

    private void clusterDistributionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterDistributionButtonActionPerformed

        try {
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (jTextArea1.getText() == null) {
                throw new IllegalArgumentException("No file was chosen!\nPlease choose a valid .gml file");
            }
            if (!jTextArea1.getText().contains(".gml")) {
                throw new IllegalArgumentException("The chosen file doesn't have the right format!\nPlease choose a valid .gml file");
            }
            scgc = new LocalClusterCoefficientSignalCollectGephiConnectorImpl(fileName);
            JFreeChart chart = scgc.createClusterDistributionImageFile(scgc.getClusterDistribution(), "ClusterDistribution.png");
            ChartPanel chartPanel = new ChartPanel(chart);
            Dimension dim = new Dimension(750, 450);
            distributionFrame.setMinimumSize(dim);
            chartPanel.setVisible(true);
            distributionFrame.add(chartPanel);

            distributionFrame.pack();
            distributionFrame.setVisible(true);
        } catch (IllegalArgumentException exception) {

            messageFrame = new JFrame();
            JOptionPane.showMessageDialog(messageFrame,
                    exception.getMessage(),
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            messageFrame = new JFrame();
            exception.printStackTrace();
            JOptionPane.showMessageDialog(messageFrame,
                    "Technical exception happened (" + exception.getCause() + ")",
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_clusterDistributionButtonActionPerformed

    private void labelPropagationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelPropagationButtonActionPerformed
        try {
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (jTextPane1.getText() == null) {
                throw new IllegalArgumentException("No input found!");
            }
            scgc = new LabelPropagationSignalCollectGephiConnectorImpl(fileName, scala.Option.apply(new Integer(jTextPane1.getText())));

            scgc.getLabelPropagation();
        } catch (IllegalArgumentException exception) {

            JOptionPane.showMessageDialog(messageFrame,
                    exception.getMessage(),
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            messageFrame = new JFrame();
            exception.printStackTrace();
            JOptionPane.showMessageDialog(messageFrame,
                    "Technical exception happened (" + exception.getCause() + ")",
                    "Signal/Collect Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }

    }//GEN-LAST:event_labelPropagationButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clusterDistributionButton;
    private javax.swing.JButton degreeDistributionButton;
    private javax.swing.JFrame distributionFrame;
    private javax.swing.JLabel distributionInfo;
    private javax.swing.JPanel distributionPanel;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JScrollPane filePathScrollPane;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel infoTextLabel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton labelPropagationButton;
    private javax.swing.JLabel labelPropagationInfo;
    private javax.swing.JPanel labelPropagationPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JComboBox metricDropDown;
    private javax.swing.JPanel metricPanel;
    private javax.swing.JFrame metricResultFrame;
    private javax.swing.JScrollPane metricValuesScrollPane;
    private javax.swing.JTextPane metricValuesTextPane;
    private javax.swing.JButton propertyButton;
    private javax.swing.JEditorPane propertyContentDisplay;
    private javax.swing.JScrollPane propertyDisplay;
    private javax.swing.JLabel propertyInfo;
    private javax.swing.JPanel propertyPanel;
    private javax.swing.JButton runMetricButton;
    private javax.swing.JScrollPane stepNumberPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

    }

    @Override
    public void componentClosed() {

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private String setMetricText(double avg, Map<String, Object> vertexMap) {
        String res = "<!doctype html><html><head><title>Execution Results</title><style type=\"text/css\"></style>"
                + "</head>"
                + "<body>"
                + "<h1><span style=\"font-family:verdana,geneva,sans-serif;font-size:12px;font-weight:normal\">Execution Results</span></h1>"
                + "<h2><span style=\"font-family:verdana,geneva,sans-serif;font-size:11px;font-weight:normal;\">Average: </span></h2>\n"
                + "<p><span style=\"font-family:verdana,geneva,sans-serif;font-size:10px;\">The average value of the vertices is:&nbsp;" + avg + "</span></p><ul>"
                + "<h2><span style=\"font-family:verdana,geneva,sans-serif;font-size:11px;font-weight:normal;\">Single Values:</span></h2>";
        for (Map.Entry<String, Object> entry : vertexMap.entrySet()) {
            res += "<li><span style=\"font-family:verdana,geneva,sans-serif;font-size:10px;\">Vertex id:&nbsp;" + entry.getKey() + "&emsp;Value: " + entry.getValue() + "</span></li>";
        }

        res += "</ul><p>&nbsp;</p></body></html>";

        return res;
    }

    private String setPropertyText(GraphProperties props) {
        String res = "<!doctype html><html><head><title>Graph Properties</title>"
                + "<style type=\"text/css\">"
                + "table.tablestyle {border-collapse:collapse}"
                + "table.tablestyle td {border: 2px solid #000000; font-family:verdana,geneva,sans-serif;font-size:10px;font-weight:normal;}"
                + "table.tablestyle th {border: 2px solid #000000; font-family:verdana,geneva,sans-serif;font-size:11px;font-weight:normal;}"
                + "</style>"
                + "</head>"
                + "<body>"
                + "<table class = \"tablestyle\">"
                + "<tr><th>Property</th><th>Value</th></tr>"
                + "<tr><td>Size</td><td>" + props.calcSize() + "</td></tr>"
                + "<tr><td>Density</td><td>" + props.calcDensity() + "</td></tr>"
                + "<tr><td>Diameter</td><td>" + props.calcDiameter() + "</td></tr>"
                + "<tr><td>Reciprocity</td><td>" + props.calcReciprocity() + "</td></tr>"
                + "</table></body></html>";

        return res;
    }

}
