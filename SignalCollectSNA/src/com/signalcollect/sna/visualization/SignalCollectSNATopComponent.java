/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.signalcollect.sna.visualization;

import com.signalcollect.sna.GraphProperties;
import com.signalcollect.sna.gephiconnectors.BetweennessSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.ClosenessSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.DegreeSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.PageRankSignalCollectGephiConnectorImpl;
import com.signalcollect.sna.gephiconnectors.SignalCollectGephiConnector;
import java.awt.Dimension;
import java.io.IOException;
import java.util.Map;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.signalcollect.sna.visualization//SignalCollectSNA//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SignalCollectSNATopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "contextmode", openAtStartup = true)
@ActionID(category = "Window", id = "com.signalcollect.sna.visualization.SignalCollectSNATopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SignalCollectSNAAction",
        preferredID = "SignalCollectSNATopComponent"
)
@Messages({
    "CTL_SignalCollectSNAAction=SignalCollectSNA",
    "CTL_SignalCollectSNATopComponent=SignalCollectSNA Window",
    "HINT_SignalCollectSNATopComponent=This is a SignalCollectSNA window"
})
public final class SignalCollectSNATopComponent extends TopComponent {

    private SignalCollectGephiConnector scgc;

    public SignalCollectSNATopComponent() {
        initComponents();
        setName(Bundle.CTL_SignalCollectSNATopComponent());
        setToolTipText(Bundle.HINT_SignalCollectSNATopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane(jTextPane3);
        jTextPane3 = new javax.swing.JTextPane();
        jFrame2 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        propertyButton = new javax.swing.JButton();
        degreeDistributionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        metricDropDown = new javax.swing.JComboBox();
        runMetricButton = new javax.swing.JButton();

        jTextPane3.setContentType("text/html");
        jTextPane3.setFocusable(false);
        jTextPane3.setMargin(new java.awt.Insets(20, 20, 20, 20));
        jFrame1.getContentPane().add(jTextPane3, java.awt.BorderLayout.CENTER);
        jScrollPane1.setViewportView(jTextPane3);

        jFrame1.getContentPane().add(jScrollPane1, java.awt.BorderLayout.PAGE_START);

        jFrame1.setContentPane(jScrollPane1);
        jFrame1.setLocation(50, 50);

        jFrame2.setLocation(50, 50);

        setAutoscrolls(true);
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(100, 150, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(100, 150, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(102, 102, 102)));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(propertyButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.propertyButton.text")); // NOI18N
        propertyButton.setAutoscrolls(true);
        propertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        jPanel2.add(propertyButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(degreeDistributionButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.degreeDistributionButton.text")); // NOI18N
        degreeDistributionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        degreeDistributionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeDistributionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        jPanel2.add(degreeDistributionButton, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        jPanel2.add(jLabel2, gridBagConstraints);

        jEditorPane1.setEditable(false);

        jEditorPane1.setContentType("text/html"); // NOI18N

        jEditorPane1.setFocusable(false);
        jScrollPane3.setViewportView(jEditorPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(100, 150, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 15, 0, 15);
        jPanel3.add(jLabel1, gridBagConstraints);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sc-logo-white-bg.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.jLabel3.text")); // NOI18N
        jLabel3.setToolTipText(org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.jLabel3.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 15, 0, 15);
        jPanel3.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(100, 150, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        metricDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Degree", "PageRank", "Closeness","Betweenness" }));
        metricDropDown.setAutoscrolls(true);
        metricDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricDropDownActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(metricDropDown, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(runMetricButton, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.runMetricButton.text")); // NOI18N
        runMetricButton.setAutoscrolls(true);
        runMetricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMetricButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(runMetricButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void runMetricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMetricButtonActionPerformed
        SignalCollectGephiConnector scgc;
//       SCText.setText("loading...");
        String actualMetric = metricDropDown.getSelectedItem().toString();
        if (actualMetric.equals("Degree")) {
            scgc = new DegreeSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
            scgc.executeGraph();
            jTextPane3.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
        } else if (actualMetric.equals("PageRank")) {
            scgc = new PageRankSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
            scgc.executeGraph();
            jTextPane3.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
        } else if (actualMetric.equals("Betweenness")) {
            scgc = new BetweennessSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
            scgc.executeGraph();
            jTextPane3.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
        } else if (actualMetric.equals("Closeness")) {
            scgc = new ClosenessSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
            scgc.executeGraph();

            jTextPane3.setText(setMetricText(scgc.getAverage(), scgc.getAll()));
        }
//        jScrollPane1.add(jTextPane1);
//        jDialog1.pack();
        Dimension dim = new Dimension(750, 450);
//        jFrame1.add(jTextPane1);
//        JScrollPane bla = new JScrollPane(jTextPane1);
//        jFrame1.add(bla);

        jFrame1.setMinimumSize(dim);
        jFrame1.pack();
        jTextPane3.setVisible(true);
        jScrollPane1.setVisible(true);
        jFrame1.setVisible(true);
    }//GEN-LAST:event_runMetricButtonActionPerformed

    private void metricDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metricDropDownActionPerformed

    private void propertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyButtonActionPerformed
        if (scgc == null) {
            scgc = new DegreeSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
        }
        jEditorPane1.setText(setPropertyText(scgc.getGraphProperties()));
    }//GEN-LAST:event_propertyButtonActionPerformed

    private void degreeDistributionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeDistributionButtonActionPerformed
        scgc = new DegreeSignalCollectGephiConnectorImpl("/Users/flaviokeller/Desktop/power.gml");
        try {
            JFreeChart chart = scgc.createImageFile(scgc.getDegreeDistrbution().degreeDistribution());
            ChartPanel chartPanel = new ChartPanel(chart);
            Dimension dim = new Dimension(750, 450);
            jFrame2.setMinimumSize(dim);
            jFrame2.add(chartPanel);

            jFrame2.pack();
            jFrame2.setVisible(true);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_degreeDistributionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton degreeDistributionButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JComboBox metricDropDown;
    private javax.swing.JButton propertyButton;
    private javax.swing.JButton runMetricButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

    }

    @Override
    public void componentClosed() {

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private String setMetricText(double avg, Map<String, Object> vertexMap) {
        String res = "<!doctype html><html><head><title>Execution Results</title><style type=\"text/css\"></style>"
                + "</head>"
                + "<body>"
                + "<h1><span style=\"font-family:verdana,geneva,sans-serif;font-size:14px;font-weight:normal\">Execution Results</span></h1>"
                + "<h2><span style=\"font-family:verdana,geneva,sans-serif;font-size:12px;font-weight:normal;\">Average: </span></h2>\n"
                + "<p><span style=\"font-family:verdana,geneva,sans-serif;font-size:11px;\">The average value of the vertices is:&nbsp;" + avg + "</span></p><ul>"
                + "<h2><span style=\"font-family:verdana,geneva,sans-serif;font-size:12px;font-weight:normal;\">Single Values:</span></h2>";
        for (Map.Entry<String, Object> entry : vertexMap.entrySet()) {
            res += "<li><span style=\"font-family:verdana,geneva,sans-serif;font-size:11px;\">Vertex id:&nbsp;" + entry.getKey() + "&emsp;Value: " + entry.getValue() + "</span></li>";
        }

        res += "</ul><p>&nbsp;</p></body></html>";

        return res;
    }

    private String setPropertyText(GraphProperties props) {
        String res = "<!doctype html><html><head><title>Graph Properties</title>"
                + "<style type=\"text/css\">"
                + "table.tablestyle {border-collapse:collapse}"
                + "table.tablestyle td {border: 5px solid #FF0000;padding: 5px; font-family:verdana,geneva,sans-serif;font-size:11px;font-weight:normal;}"
                + "table.tablestyle th {border: 5px solid #FF0000;padding: 5px; font-family:verdana,geneva,sans-serif;font-size:12px;font-weight:bold;}"
                + "</style>"
                + "</head>"
                + "<body>"
                + "<table class = \"tablestyle\">"
                + "<tr><th>Property</th><th>Value</th></tr>"
                + "<tr><td>Size</td><td>" + props.calcSize() + "</td></tr>"
                + "<tr><td>Density</td><td>" + props.calcDensity() + "</td></tr>"
                + "<tr><td>Diameter</td><td>" + props.calcDiameter() + "</td></tr>"
                + "<tr><td>Reciprocity</td><td>" + props.calcReciprocity() + "</td></tr>"
                + "</table></body></html>";
//                + "<h1><span style=\"font-family:verdana,geneva,sans-serif;font-size:11px;font-weight:normal;\">Graph Size:&emsp;" + props.calcSize() + 
//                "<br>Density:&emsp;&emsp;&emsp;" + props.calcDensity() +"<br>Diameter:&emsp;&emsp;"+props.calcDiameter()+"<br>Reciprocity:&emsp;"+props.calcReciprocity()+"<br>"
//                + "</span></h1>";

        return res;
    }

}
