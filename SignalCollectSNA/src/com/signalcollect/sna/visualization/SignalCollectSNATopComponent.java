/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.signalcollect.sna.visualization;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.signalcollect.sna.visualization//SignalCollectSNA//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SignalCollectSNATopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "contextmode", openAtStartup = false)
@ActionID(category = "Window", id = "com.signalcollect.sna.visualization.SignalCollectSNATopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SignalCollectSNAAction",
        preferredID = "SignalCollectSNATopComponent"
)
@Messages({
    "CTL_SignalCollectSNAAction=SignalCollectSNA",
    "CTL_SignalCollectSNATopComponent=SignalCollectSNA Window",
    "HINT_SignalCollectSNATopComponent=This is a SignalCollectSNA window"
})
public final class SignalCollectSNATopComponent extends TopComponent {

    public SignalCollectSNATopComponent() {
        initComponents();
        setName(Bundle.CTL_SignalCollectSNATopComponent());
        setToolTipText(Bundle.HINT_SignalCollectSNATopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        runMetric = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(runMetric, org.openide.util.NbBundle.getMessage(SignalCollectSNATopComponent.class, "SignalCollectSNATopComponent.runMetric.text")); // NOI18N
        runMetric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMetricActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runMetric)
                .addContainerGap(297, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(runMetric)
                .addContainerGap(251, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runMetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMetricActionPerformed
        JButton btn = new JButton();
        btn.setText("Hello,im a new button");
        btn.setSize(50, 20);
        btn.setLocation(10, 10);
        btn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
//                ch.uzh.ifi.ddis.signalcollect.DegreeVertex dv = new DegreeVertex(1);
                JFrame jf = new JFrame();
                JLabel jl = new JLabel();
                jl.setText("Signal and Collect");
                jf.add(jl);
                jf.setVisible(true);
            }

           
        });
        JFrame f = new JFrame();
        f.setSize(600, 300);
        f.setLocation(200, 100);
        f.add(btn);
        f.setVisible(true);
    }//GEN-LAST:event_runMetricActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton runMetric;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        runMetric.setLabel("Run a Signal/Collect Metric");
        runMetric.setName("Run a Signal/Collect Metric");
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
